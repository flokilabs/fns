import { useEffect, useState } from 'react'

import Head from 'next/head'
import Image from 'next/image'

import ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'
import Ceramic from '@ceramicnetwork/http-client'
import { DID } from 'dids'
import { fcl, getProvider, signMessage, verifySignatures } from '../utils/did-provider'
import { makeTile, getRewardSchema } from '../utils/ceramic'
import Button from '../components/Button'
import InputButton from '../components/InputButton'

const CERAMIC_URL = process.env.NEXT_PUBLIC_CERAMIC_API || 'http://localhost:7007'

function Divider() {
  return (
    <div className="w-full h-1 rounded my-4 bg-gray-200"></div>
  )
}

export default function Home() {
  const [status, setStatus] = useState('Not authenticated');
  const [id, setId] = useState(0);

  const refresh = () => {
    window.ceramic = new Ceramic(CERAMIC_URL)
    let ceramic = window.ceramic;

    console.log('Ceramic:', ceramic)

    const resolver = {
      ...ThreeIdResolver.getResolver(ceramic),
    }
    const did = new DID({ resolver })
    ceramic.did = did;
    setStatus(ceramic.did.authenticated ? "Authenticated" : "Not authenticated")
    setId(0);
  }

  useEffect(async () => {
    if (!window.ceramic) {
      refresh()
    }
  }, [])


  const [doc, setDoc] = useState(null);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="mx-auto max-w-xl mt-48">
        <div className="my-4 border rounded-xl p-8 text-sm">
          <p>{status}</p>
          {id ? <p>ID: {id}</p> : null}
        </div>

        {status === 'Authenticated' ?
          <Button onClick={async () => {
            refresh();
            await fcl.unauthenticate()
          }}>Reset</Button> :

          <Button onClick={async () => {
            let ceramic = window.ceramic;

            if (!ceramic.did.authenticated) {
              setStatus('Sign in with Flow')
              const signedMessage = await signMessage('hello world')

              setStatus('Communicating with Ceramic network')
              try {
                const provider = await getProvider(ceramic, signedMessage);
                ceramic.did.setProvider(provider)
              } catch {
                console.error(ceramic.did)
              }
            }

            setStatus('Authenticating...')
            await ceramic.did.authenticate();
            setStatus('Authenticated')
            setId(ceramic.did.id);

          }}>Authenticate with Flow</Button>
        }

        {
          status === "Authenticated" && (
            <Button onClick={async () => {
              let ceramic = window.ceramic;

              const schema = await getRewardSchema(ceramic);
              const doc = await makeTile(ceramic, schema);
              console.log('Made a new doc!', doc.id.toString());
              setDoc(doc);
              window.doc = doc;
            }}>make doc</Button>
          )
        }

        <Divider />

        <InputButton
          placeholder='message to sign'
          hint='Sign a message with your Flow account'
          callback={async (msg) => {
            const signatures = await signMessage(msg)
            console.log('Signed message', signatures[0])

            const trues = await verifySignatures(msg, signatures);
            console.log('Verify?', trues)

          }}>Sign Message</InputButton>

        <InputButton
          placeholder='DID string'
          hint='Enter a DID string to resolve... something like did:3:kjzl6cwe1jw146hbs4gvmwftw7w5hwv1dfj2m2uwz0iyx0z0uruvu6bt7cw7xwh'
          callback={async (did) => {
            let ceramic = window.ceramic;
            if (!did.startsWith('did:3:')) {
              did = 'did:3:' + did;
            }
            const foo = await ceramic.did.resolve(did)
            console.log(did)
            console.log(foo);

          }}>Resolve DID</InputButton>


        <Button onClick={async () => {
          await fcl.authenticate()
          const currentUser = await fcl.currentUser().snapshot()
          console.log('Current user', currentUser)
        }}>Get current user (fcl)</Button>

        <Divider />


      </main>

    </div>
  )
}
