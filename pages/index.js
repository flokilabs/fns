import { useEffect, useState } from 'react'

import Head from 'next/head'
import Image from 'next/image'

import ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'
import Ceramic from '@ceramicnetwork/http-client'
import { DID } from 'dids'
import { fcl, getProvider, signMessage, verifySignatures } from '../utils/did-provider'
import { makeTile, getRewardSchema } from '../utils/ceramic'
import DocView from '../components/DocView'
import Button from '../components/Button'

const CERAMIC_URL = process.env.NEXT_PUBLIC_CERAMIC_API || 'http://localhost:7007'

export default function Home() {
  const [status, setStatus] = useState('Not authenticated');
  const [id, setId] = useState(0);

  const refresh = () => {
    window.ceramic = new Ceramic(CERAMIC_URL)

    let ceramic = window.ceramic;
    console.log('Ceramic:', ceramic)

    const resolver = {
      ...ThreeIdResolver.getResolver(ceramic),
    }
    const did = new DID({ resolver })
    console.log('Created new DID')

    ceramic.did = did;
    console.log('before authenticate', ceramic.did);
  }

  useEffect(async () => {
    if (!window.ceramic) {
      refresh()
    }
  }, [])

  const [doc, setDoc] = useState(null);
  const loadDoc = async (streamId) => {
    setStatus('Loading ' + JSON.stringify(streamId))
    let c = await ceramic.loadStream(streamId);
    setDoc(c);
  }
  const updateDoc = async () => {
    await doc.update({ title: 'The great gatsby', message: 'something else' })
    console.log(doc.content)
    setDoc(doc)
    setcontent(doc ? JSON.stringify(doc.content) : "")
  }

  const [streamId, setStreamId] = useState('');
  const [content, setcontent] = useState('');
  useEffect(() => {
    setStreamId(doc ? doc.id.toString() : "")
    setcontent(doc ? JSON.stringify(doc.content) : "")
  }, [doc])

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="mx-auto max-w-lg">
        {status}
        <p>ID: {id}</p>

        <DocView streamId={streamId} setStreamId={setStreamId} content={content} onLoad={loadDoc} updateDoc={updateDoc} />

        <Button onClick={async () => {
          refresh();
        }}>Reset</Button>

        <Button onClick={async () => {
          console.log('Signed message:', await signMessage('hello'))
        }}>Sign a message</Button>

        <Button onClick={async () => {
          const schema = await getRewardSchema(ceramic);
          const doc = await makeTile(ceramic, schema);
          console.log('Made a new doc!', doc.id.toString());
          setDoc(doc);
          window.doc = doc;
        }}>make doc</Button>


        <Button onClick={async () => {
          console.log('before authenticate', ceramic.did);

          // set the provider
          setStatus('Sign in with Flow')
          const signedMessage = await signMessage('hello world')
          const trues = await verifySignatures('hello world', signedMessage);

          setStatus('Communicating with Ceramic network')
          const provider = await getProvider(signedMessage);
          ceramic.did.setProvider(provider)

          setStatus('Authenticating...')
          await ceramic.did.authenticate();
          setStatus('Authenticated')
          setId(ceramic.did.id);

        }}>Authenticate provider</Button>


        <Button onClick={async () => {
          await fcl.authenticate()
          const currentUser = await fcl.currentUser().snapshot()
          console.log('Current user', currentUser)
        }}>Get current user</Button>
      </main>

    </div>
  )
}
